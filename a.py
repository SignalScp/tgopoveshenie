import os
import logging
import asyncio
import json
from datetime import datetime
from typing import Dict, Any
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, Update
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web
from aiohttp.web_request import Request
from aiohttp.web_response import Response
import aiohttp_cors

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
WEBHOOK_HOST = os.environ.get('RENDER_EXTERNAL_URL', 'https://your-app.onrender.com')
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = int(os.environ.get('PORT', 5000))

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "countdown_data.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class CountdownStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_description = State()

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
countdown_data: Dict[int, Dict[str, Any]] = {}

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    global countdown_data
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                countdown_data = {int(k): v for k, v in data.items()}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            countdown_data = {}
    else:
        countdown_data = {}

def save_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(countdown_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å—á–µ—Ç–∞ –¥–Ω–µ–π –¥–æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.\n"
        "zov\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/setdate - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Ç—Å—á–µ—Ç\n"
        "/remove - –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"
        "by AppleElol",
        parse_mode='HTML'
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìÖ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setdate —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è\n"
        "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024)\n"
        "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n"
        "4Ô∏è‚É£ –ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç—Å—á–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /status\n\n"
        "üìå <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/setdate - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Ç—Å—á–µ—Ç\n"
        "/remove - –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ\n",
        parse_mode='HTML'
    )

@dp.message(Command("setdate"))
async def cmd_setdate(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã"""
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 14.88.1941",
        parse_mode='HTML'
    )
    await state.set_state(CountdownStates.waiting_for_date)

@dp.message(Command("remove"))
async def cmd_remove(message: Message):
    """–£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ"""
    chat_id = message.chat.id
    if chat_id in countdown_data:
        event_description = countdown_data[chat_id]['description']
        del countdown_data[chat_id]
        save_data()
        await message.answer(
            f"üóë –°–æ–±—ã—Ç–∏–µ <b>{event_description}</b> —É–¥–∞–ª–µ–Ω–æ",
            parse_mode='HTML'
        )
    else:
        await message.answer(
            "‚ùå –î–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setdate —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ",
            parse_mode='HTML'
        )

@dp.message(Command("status"))
async def cmd_status(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—Ç—Å—á–µ—Ç–∞"""
    chat_id = message.chat.id
    if chat_id not in countdown_data:
        await message.answer(
            "‚ùå –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setdate",
            parse_mode='HTML'
        )
        return

    data = countdown_data[chat_id]
    target_date = datetime.strptime(data['date'], '%Y-%m-%d')
    description = data['description']

    today = datetime.now().date()
    target = target_date.date()

    days_left = (target - today).days

    if days_left > 0:
        await message.answer(
            f"üìÖ <b>{description}</b>\n"
            f"üóì –î–∞—Ç–∞: {target.strftime('%d.%m.%Y')}\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: <b>{days_left} –¥–Ω.</b>\n\n",
            parse_mode='HTML'
        )
    elif days_left == 0:
        await message.answer(
            f"üéâ <b>{description}</b>\n"
            f"üìÖ –°–µ–≥–æ–¥–Ω—è —Ç–æ—Ç —Å–∞–º—ã–π –¥–µ–Ω—å! üéä",
            parse_mode='HTML'
        )
    else:
        await message.answer(
            f"üìÖ <b>{description}</b>\n"
            f"üóì –î–∞—Ç–∞: {target.strftime('%d.%m.%Y')}\n"
            f"‚ö†Ô∏è –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±—ã–ª–æ {abs(days_left)} –¥–Ω. –Ω–∞–∑–∞–¥",
            parse_mode='HTML'
        )

@dp.message(CountdownStates.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        date_str = message.text.strip()
        target_date = datetime.strptime(date_str, '%d.%m.%Y')

        await state.update_data(date=target_date.strftime('%Y-%m-%d'))
        await message.answer(
            f"‚úÖ –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>{target_date.strftime('%d.%m.%Y')}</b>\n\n"
            "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
            parse_mode='HTML'
        )
        await state.set_state(CountdownStates.waiting_for_description)

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024)\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='HTML'
        )

@dp.message(CountdownStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    description = message.text.strip()
    if not description:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    data = await state.get_data()
    date_str = data['date']

    chat_id = message.chat.id
    countdown_data[chat_id] = {
        'date': date_str,
        'description': description,
        'chat_id': chat_id
    }

    save_data()

    target_date = datetime.strptime(date_str, '%Y-%m-%d')
    days_left = (target_date.date() - datetime.now().date()).days

    await message.answer(
        f"‚úÖ <b>–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
        f"üìÖ <b>{description}</b>\n"
        f"üóì –î–∞—Ç–∞: {target_date.strftime('%d.%m.%Y')}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: <b>{days_left} –¥–Ω.</b>\n\n",
        parse_mode='HTML'
    )

    await state.clear()

@dp.message()
async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await message.answer(
        "‚ùì –Ø –Ω–µ –ø–æ–Ω—è–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def create_app():
    """–°–æ–∑–¥–∞–µ—Ç aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    app = web.Application()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
    cors = aiohttp_cors.setup(app, defaults={
        "*": aiohttp_cors.ResourceOptions(
            allow_credentials=True,
            expose_headers="*",
            allow_headers="*",
            allow_methods="*"
        )
    })

    # Webhook handler
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)

    # Health check endpoint –¥–ª—è Render
    async def health_check(request: Request) -> Response:
        return web.Response(text="OK", status=200)

    # –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    async def index(request: Request) -> Response:
        active_events = len(countdown_data)
        return web.Response(
            text=f"ü§ñ Telegram Countdown Bot is running!\n"
                 f"üìä Active events: {active_events}\n"
                 f"üåê Webhook URL: {WEBHOOK_URL}\n",
            status=200,
            content_type='text/plain; charset=utf-8'
        )

    # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ JSON
    async def bot_status(request: Request) -> Response:
        me = await bot.get_me()
        return web.json_response({
            "bot_info": {
                "id": me.id,
                "username": me.username,
                "first_name": me.first_name
            },
            "active_events": len(countdown_data),
            "webhook_url": WEBHOOK_URL,
            "status": "running"
        })

    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_get('/', index)
    app.router.add_get('/health', health_check)
    app.router.add_get('/status', bot_status)

    # –î–æ–±–∞–≤–ª—è–µ–º CORS –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º
    for route in list(app.router.routes()):
        cors.add(route)

    return app

async def on_startup():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    load_data()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url != WEBHOOK_URL:
        await bot.set_webhook(url=WEBHOOK_URL, drop_pending_updates=True)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logger.info(f"Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    await bot.session.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–ø—É—Å–∫
    await on_startup()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = await create_app()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º cleanup
    app.on_cleanup.append(lambda app: on_shutdown())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()

    site = web.TCPSite(runner, WEBAPP_HOST, WEBAPP_PORT)
    await site.start()

    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEBAPP_HOST}:{WEBAPP_PORT}")
    logger.info(f"Webhook: {WEBHOOK_URL}")

    # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
    try:
        await asyncio.Future()  # run forever
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        await runner.cleanup()
        await on_shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
